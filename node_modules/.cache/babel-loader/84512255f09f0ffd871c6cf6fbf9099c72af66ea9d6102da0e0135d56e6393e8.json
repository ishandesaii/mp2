{"ast":null,"code":"var _jsxFileName = \"/Users/ishandesai/Desktop/mp2/mp2/src/context/SelectionContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SelectionContext = /*#__PURE__*/createContext(null);\nexport const SelectionProvider = ({\n  children\n}) => {\n  _s();\n  const [list, setList] = useState([]);\n  return /*#__PURE__*/_jsxDEV(SelectionContext.Provider, {\n    value: {\n      list,\n      setList\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n};\n_s(SelectionProvider, \"5B5creADs30R66wN/2t9GZl+br4=\");\n_c = SelectionProvider;\nexport function useSelection() {\n  _s2();\n  const ctx = useContext(SelectionContext);\n  if (!ctx) throw new Error(\"useSelection must be used inside provider\");\n  return ctx;\n}\n_s2(useSelection, \"/dMy7t63NXD4eYACoT93CePwGrg=\");\nvar _c;\n$RefreshReg$(_c, \"SelectionProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","SelectionContext","SelectionProvider","children","_s","list","setList","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useSelection","_s2","ctx","Error","$RefreshReg$"],"sources":["/Users/ishandesai/Desktop/mp2/mp2/src/context/SelectionContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState } from \"react\";\nimport type { Meal } from \"../types/meal\";\n\ntype Ctx = {\n  list: Meal[];\n  setList: (arr: Meal[]) => void;\n};\n\nconst SelectionContext = createContext<Ctx | null>(null);\n\nexport const SelectionProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [list, setList] = useState<Meal[]>([]);\n  return (\n    <SelectionContext.Provider value={{ list, setList }}>\n      {children}\n    </SelectionContext.Provider>\n  );\n};\n\nexport function useSelection() {\n  const ctx = useContext(SelectionContext);\n  if (!ctx) throw new Error(\"useSelection must be used inside provider\");\n  return ctx;\n}\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAQnE,MAAMC,gBAAgB,gBAAGL,aAAa,CAAa,IAAI,CAAC;AAExD,OAAO,MAAMM,iBAA0D,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC1F,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAS,EAAE,CAAC;EAC5C,oBACEE,OAAA,CAACC,gBAAgB,CAACM,QAAQ;IAACC,KAAK,EAAE;MAAEH,IAAI;MAAEC;IAAQ,CAAE;IAAAH,QAAA,EACjDA;EAAQ;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACgB,CAAC;AAEhC,CAAC;AAACR,EAAA,CAPWF,iBAA0D;AAAAW,EAAA,GAA1DX,iBAA0D;AASvE,OAAO,SAASY,YAAYA,CAAA,EAAG;EAAAC,GAAA;EAC7B,MAAMC,GAAG,GAAGnB,UAAU,CAACI,gBAAgB,CAAC;EACxC,IAAI,CAACe,GAAG,EAAE,MAAM,IAAIC,KAAK,CAAC,2CAA2C,CAAC;EACtE,OAAOD,GAAG;AACZ;AAACD,GAAA,CAJeD,YAAY;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}