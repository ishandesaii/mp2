{"ast":null,"code":"var _jsxFileName = \"/Users/ishandesai/Desktop/mp2/mp2/src/pages/GalleryView.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { getCategories, filterByCategory } from \"../api/meals\";\nimport Filters from \"../components/Filters\";\nimport Card from \"../components/Card\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GalleryView() {\n  _s();\n  const [categories, setCategories] = useState([]);\n  const [selected, setSelected] = useState([]);\n  const [meals, setMeals] = useState([]);\n  useEffect(() => {\n    getCategories().then(setCategories);\n  }, []);\n  useEffect(() => {\n    if (selected.length === 0) {\n      setMeals([]);\n      return;\n    }\n    Promise.all(selected.map(c => filterByCategory(c))).then(results => setMeals(Array.from(new Map(results.flat().map(m => [m.idMeal, m])).values())));\n  }, [selected]);\n  const toggle = c => {\n    setSelected(prev => prev.includes(c) ? prev.filter(x => x !== c) : [...prev, c]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Gallery View\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Filters, {\n      categories: categories,\n      selected: selected,\n      onToggle: toggle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"grid\",\n        gridTemplateColumns: \"repeat(auto-fit, minmax(200px,1fr))\",\n        gap: \"1rem\"\n      },\n      children: meals.map(m => /*#__PURE__*/_jsxDEV(Card, {\n        meal: m,\n        list: meals\n      }, m.idMeal, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n_s(GalleryView, \"ntJ7H+Y/jTXBRLFzukiarI2zKoU=\");\n_c = GalleryView;\nvar _c;\n$RefreshReg$(_c, \"GalleryView\");","map":{"version":3,"names":["useEffect","useState","getCategories","filterByCategory","Filters","Card","jsxDEV","_jsxDEV","GalleryView","_s","categories","setCategories","selected","setSelected","meals","setMeals","then","length","Promise","all","map","c","results","Array","from","Map","flat","m","idMeal","values","toggle","prev","includes","filter","x","children","fileName","_jsxFileName","lineNumber","columnNumber","onToggle","style","display","gridTemplateColumns","gap","meal","list","_c","$RefreshReg$"],"sources":["/Users/ishandesai/Desktop/mp2/mp2/src/pages/GalleryView.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { getCategories, filterByCategory } from \"../api/meals\";\nimport { Meal, Category } from \"../types/meal\";\nimport Filters from \"../components/Filters\";\nimport Card from \"../components/Card\";\n\nexport default function GalleryView() {\n  const [categories, setCategories] = useState<Category[]>([]);\n  const [selected, setSelected] = useState<string[]>([]);\n  const [meals, setMeals] = useState<Meal[]>([]);\n\n  useEffect(() => {\n    getCategories().then(setCategories);\n  }, []);\n\n  useEffect(() => {\n    if (selected.length === 0) {\n      setMeals([]);\n      return;\n    }\n    Promise.all(selected.map(c => filterByCategory(c)))\n      .then(results => setMeals(Array.from(new Map(results.flat().map(m => [m.idMeal, m])).values())));\n  }, [selected]);\n\n  const toggle = (c: string) => {\n    setSelected(prev => prev.includes(c) ? prev.filter(x => x !== c) : [...prev, c]);\n  };\n\n  return (\n    <div>\n      <h2>Gallery View</h2>\n      <Filters categories={categories} selected={selected} onToggle={toggle} />\n      <div style={{ display: \"grid\", gridTemplateColumns: \"repeat(auto-fit, minmax(200px,1fr))\", gap: \"1rem\" }}>\n        {meals.map(m => (\n          <Card key={m.idMeal} meal={m} list={meals} />\n        ))}\n      </div>\n    </div>\n  );\n}\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,aAAa,EAAEC,gBAAgB,QAAQ,cAAc;AAE9D,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,IAAI,MAAM,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,eAAe,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACpC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAa,EAAE,CAAC;EAC5D,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAW,EAAE,CAAC;EACtD,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAS,EAAE,CAAC;EAE9CD,SAAS,CAAC,MAAM;IACdE,aAAa,CAAC,CAAC,CAACc,IAAI,CAACL,aAAa,CAAC;EACrC,CAAC,EAAE,EAAE,CAAC;EAENX,SAAS,CAAC,MAAM;IACd,IAAIY,QAAQ,CAACK,MAAM,KAAK,CAAC,EAAE;MACzBF,QAAQ,CAAC,EAAE,CAAC;MACZ;IACF;IACAG,OAAO,CAACC,GAAG,CAACP,QAAQ,CAACQ,GAAG,CAACC,CAAC,IAAIlB,gBAAgB,CAACkB,CAAC,CAAC,CAAC,CAAC,CAChDL,IAAI,CAACM,OAAO,IAAIP,QAAQ,CAACQ,KAAK,CAACC,IAAI,CAAC,IAAIC,GAAG,CAACH,OAAO,CAACI,IAAI,CAAC,CAAC,CAACN,GAAG,CAACO,CAAC,IAAI,CAACA,CAAC,CAACC,MAAM,EAAED,CAAC,CAAC,CAAC,CAAC,CAACE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;EACpG,CAAC,EAAE,CAACjB,QAAQ,CAAC,CAAC;EAEd,MAAMkB,MAAM,GAAIT,CAAS,IAAK;IAC5BR,WAAW,CAACkB,IAAI,IAAIA,IAAI,CAACC,QAAQ,CAACX,CAAC,CAAC,GAAGU,IAAI,CAACE,MAAM,CAACC,CAAC,IAAIA,CAAC,KAAKb,CAAC,CAAC,GAAG,CAAC,GAAGU,IAAI,EAAEV,CAAC,CAAC,CAAC;EAClF,CAAC;EAED,oBACEd,OAAA;IAAA4B,QAAA,gBACE5B,OAAA;MAAA4B,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrBhC,OAAA,CAACH,OAAO;MAACM,UAAU,EAAEA,UAAW;MAACE,QAAQ,EAAEA,QAAS;MAAC4B,QAAQ,EAAEV;IAAO;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACzEhC,OAAA;MAAKkC,KAAK,EAAE;QAAEC,OAAO,EAAE,MAAM;QAAEC,mBAAmB,EAAE,qCAAqC;QAAEC,GAAG,EAAE;MAAO,CAAE;MAAAT,QAAA,EACtGrB,KAAK,CAACM,GAAG,CAACO,CAAC,iBACVpB,OAAA,CAACF,IAAI;QAAgBwC,IAAI,EAAElB,CAAE;QAACmB,IAAI,EAAEhC;MAAM,GAA/Ba,CAAC,CAACC,MAAM;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAyB,CAC7C;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAC9B,EAAA,CAjCuBD,WAAW;AAAAuC,EAAA,GAAXvC,WAAW;AAAA,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}